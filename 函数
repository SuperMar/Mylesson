函数形参调用时才申请,函数执行完毕即销毁,()函数调用,函数返回值,函数名,执行体,函数为了代替较复杂的代码块
C++尽量使用传引用代替传指针操作实参的值,不需改变形参的值时,尽量使用const <T> &
函数内部变量static(静态局部变量)在函数执行完毕仍然保留改变后的值
分离式编译:fact.h fact.cc factMain.cc, 函数声明在fact.h 函数定义在fact.cc, fact.cc包含fact.h, cc factMain.cc fact.cc
函数可以多次声明,不可多次定义
函数执行时,main()将控制权交给函数,main()暂停,执行完毕,控制权回到main()
void fcn(const int i) {}
void fcn(int) {}            //错误,重复定义
C++允许定义若干具有相同名字的函数,前提是不同函数的形参列表有明显的区别
形参初始化等同于变量初始化
把函数不会改变的形参定义成普通引用是一种常见错误,极大限制函数所能接受的实参类型,例:不能把const对象,字面值等需要类型转换的对象传递给普通的引用形参
string::size_type find_char(const string &s, char c, string::size_type &occurs);
string::size_type find_char(string &s, char c, string::size_type &occurs);
find_char("Hello World", 'o', ctr);  //编译错误

数组形参:不允许拷贝数组,所以无法以值传递的方式使用数组参数,使用数组时会转换成指针(也需考虑数组越界)
void print(const int*);
void print(const int[]);
void print(const int[10]);

int i = 0, j[2] = {0, 1};
print(&i);
print(j);          //j转换成int*并指向j[0]

使用标准库规范:
void print(const int *beg, const int *end)
{
    while(beg!=end)
        cout << *beg++ << endl;
}

int j[2] = {0, 1};
print(begin(j), end(j));

显示传递一个表示数组大小的形参:
void print(const int ia[], size_t size)
{
    for(size_t i = 0; i != size; ++i){
        cout << ia[i] << endl;
    }
}
只要传递给函数的size的值不超过数组实际的大小,函数就是安全的
数组形参应该是指向const的指针,只有当函数确实要改变元素值的时候,才能形参定义成指向非常量的指

function(int &arr[10])      //错误:arr声明成了引用的数组
function(int (&arr)[10])    //正确:arr是具有10个整数的整型数组的引用
限制了function的可用性,只能传入大小为10的整型数组

多维数组作为形参:
void print(int (*matrix)[10], int rowSize){}
void print(int matrix[][10], int rowSize){}
matrix为指向含有10个整数的数组的指针

main:处理命令行选项
int main(int argc,char *argv[]){}
int main(int argc,char **argv){}
//argv指向char*
main函数位于可执行文件prog内,可以向程序传递以下选项:
prog -d -o ofile data0
argv[0] = "prog"; argv[1] = "-d"; argv[2] = "-o"; argv[3] = "ofile"; argv[4] = "data0"; argv[5] = 0;
可选的实参从argv[1]开始,argv[0]保存程序的名字,而非用户输入

含有可变形参的函数:
initializer_list形参:和vector一样,是一种模板类型;和vector不一样的是,initializer_list对象中的元素永远是常量值
void error_msg(initializer_list<string> il)
{
    for (auto beg = il.begin(); beg != il.end(); ++beg)
        cout << *beg << " ";
    cout << endl;
}
if (expected != actual)
    error_msg({"functionX", expected, actual});
else
    error_msg({"functionX", "okay"});

省略符形参:为了便于C++程序访问某些特殊的C代码设置,这些代码使用了名为varargs的C标准库功能
大多数类类型的对象在传递给省略符形参时都无法正确拷贝
省略符形参只能出现在形参列表的最后一个位置:
void foo(parm_list, ...);    //逗号可选
void foo(...);

return语句:
return;
return expression;
返回一个值的方式和初始化一个变量或形参的方式完全一样,返回的值用于初始化调用点的一个临时量,该临时量就是函数调用的结果
不要返回局部变量的引用或指针

引用返回左值,我们能为返回类型是非常量引用的函数的结果赋值
shorterString("hi", "bye") = "X"     //错误:返回值是个常量

递归:一个函数调用了它自身,不管是直接调用还是间接调用,都称该函数为递归函数
int favtorial(int val)
{
    if (val > 1)
        return factorial(val - 1) * val;
    return 1;
}

使用尾置返回类型:
auto func(int i) -> int(*)[10];     //返回一个指针指向含有10个整数的数组

使用decltype:
int odd[] = {1,3,5,7,9};
int even[] = {0,2,4,6,8};
decltype[odd] *addptr(int i)
{
    return (i % 2) ? &odd : &even;
}

函数重载:同一个作用域内的几个函数名字相同但形参列表不同,我们称之为函数重载
不允许两个函数除了返回类型外其他所有的要素都相同
顶层const不影响传入函数的对象:Record lookup(Phone);
                           Record lookup(const Phone);    //重复声明
底层const: Record lookup(Account*);
          Record lookup(const Account*);  //新函数,作用与常量引用

默认实参:一个形参被赋予了默认值,它后面的所有形参都必须有默认值
当设计含有默认实参的函数时,其中一项任务合理设置形参的顺序,尽量让不怎么使用默认值的形参出现在前面,而让那些经常使用默认值的形参出现在后面
函数声明时,我们不能修改一个已经存在的默认值,但是可以添加默认实参:string screen(sz = 24,sz = 80, char);
通常,应该在函数声明中指定默认实参,并将该声明放在合适的头文件中

默认实参初始值:局部变量不能作为默认实参
sz wd = 80;
char def = ' ';
sz ht();
string screen(sz = ht(), sz = wd, char = def);
string window = screen();

内联函数:节省运行时开销,在每个调用点上内联的展开,省去压栈弹栈和实参拷贝过程
inline const string &
shorterString(const string &s1, const string &s2)
{
    return s1.size() <= s2.size() ? s1 : s2;
}
内联说明只是向编译器发出的一个请求,编译器可以选择忽略这个请求

constexper函数:能用于常量表达式的函数,函数的返回类型及所有形参的类型得是字面值类型,而且函数体中必须有且只有一条return语句
constexpr int new_sz() { return 42;}
constexpr int foo = new_sz();   //正确:foo是一个常量表达式
constexpr函数不一定返回常量表达式

内联函数和constexpr函数通常定义在头文件中

assert(expr)  NDEBUG

函数匹配:选定本次调用对应的重载函数集,集合中的函数称为候选函数

函数指针:指向的是函数而非对象
想声明一个可以指向函数的指针,只需要用指针替换函数名即可
bool lenngthCompare(const string &, const string &);
bool (*pf)(const string &, const string &);
当我们把函数名作为一个值使用时,该函数自动地转换成指针
pf = lengthCompare;
pf = &lengthCompare;   //等价,取地址符可选
可以直接使用指向函数的指针调用该函数,bool b1 = pf("hello", "goodbye");
                                bool b2 = (*pf)("hello", "goodbye");
                                bool b3 = lengthCompare("hello", "goodbye");

可以为函数指针赋一个nullptr或者0的整型常量表达式,表示该指针没有指向任何一个函数
重载函数的指针必须与重载函数中的某一个精确匹配

