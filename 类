成员函数的声明必须在类的内部,定义既可以在类的内部,也可以在类的外部
定义在类内部的函数是隐式的inline函数
this指针:
total.isbn() //Sales_data::isbn(&total)
this = &total
this指针是一个常量指针,不允许改变this中保存的地址
编译器首先编译成员的声明,然后才轮到成员函数体
在类的外部定义成员函数:
double Sales_data::avg_price() const {
    if(units_sold)
        return revenue/units_sold;
    else
        return 0;
}

构造函数:构造函数的任务是初始化类的数据成员,只要类的对象被创建,就会执行构造函数
构造函数的名字和类名相同,构造函数没有返回类型
类可以包含多个构造函数,不同的构造函数之间必须在参数数量或参数类型上有所区别
构造函数不能声明成const
只有当类没有声明任何构造函数时,编译器才会自动的生成默认构造函数
如果类包含有内置类型或者复合类型的成员,则只有当这些成员全都被赋予了类内的初始值时,这个类才适合于使用合成的默认构造函数
Sale_data() = default; 默认行为构造函数

构造函数初始值列表:Sales_data(const std::string &s, unsigned n, double p):bookNo(s), units_sold(n), revenue(p*n) {}

使用class和struct定义类唯一的区别就是默认的访问权限

友元函数:
class Sales_data{
friend Sales_data add(const Sales_data&, const Sales_data&);
friend std::istream &read(std::istream&, Sales_data&);
friend std::ostream &print(std::ostream&, const Sales_data&);
};

友元声明只能出现在类定义的内部,但是在类内出现的具体位置不限，友元不受它所在区域访问控制级别的约束

友元的声明仅仅指定了访问的权限,而非一个通常意义上的函数声明

class Screen{
public:
    typedef std::string::size_type pos;
    Screen() = default;
    Screen(pos ht, pos wd, char c): height(ht), width(wd),
    contents(ht * wd, c) { }
    char get() const
        { return contents[cursor];}
    inline char get(pos ht, pos wd) const;
    Screen &move(pos r, pos c);
private:
    pos cursor = 0;
    pos height = 0, width =0;
    std::string contents;
};
//定义在类内部的成员函数是自动inline的
Screen &Screen::move(pos r, pos c)
{
    pos row = r * width;
    cursor = row + c;
    return *this;
}
char Screen::get(pos r, pos c) const
{
    pow row = r * width;
    return contents[row + c];
}

可变数据成员:永远不会是const
mutable

类内初始值必须使用=或者{}的初始化形式

一个const成员函数如果以引用的形式返回*this,那么它的返回类型是常量引用

 
